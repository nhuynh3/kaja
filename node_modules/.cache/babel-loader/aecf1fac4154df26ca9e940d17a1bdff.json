{"remainingRequest":"/Users/glu/Desktop/flask-vuejs-template/node_modules/babel-loader/lib/index.js!/Users/glu/Desktop/flask-vuejs-template/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/glu/Desktop/flask-vuejs-template/src/views/Form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/glu/Desktop/flask-vuejs-template/src/views/Form.vue","mtime":1543710694000},{"path":"/Users/glu/Desktop/flask-vuejs-template/package.json","mtime":1543702585000},{"path":"/Users/glu/Desktop/flask-vuejs-template/node_modules/cache-loader/dist/cjs.js","mtime":1543708847000},{"path":"/Users/glu/Desktop/flask-vuejs-template/node_modules/babel-loader/lib/index.js","mtime":1543708840000},{"path":"/Users/glu/Desktop/flask-vuejs-template/node_modules/vue-loader/lib/index.js","mtime":1543708848000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _slicedToArray from \"/Users/glu/Desktop/flask-vuejs-template/node_modules/@babel/runtime/helpers/builtin/es6/slicedToArray\";\nimport \"core-js/modules/es6.function.name\";\nimport _objectSpread from \"/Users/glu/Desktop/flask-vuejs-template/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Autocomplete from './Autocomplete';\nimport { mapFields } from 'vuex-map-fields';\nexport default {\n  components: {\n    Autocomplete: Autocomplete\n  },\n  data: function data() {\n    return {\n      storeTypes: ['Mall', 'Metro', 'Arcade', 'Centre'],\n      users: [],\n      errors: {} // for form validation\n\n    };\n  },\n  computed: _objectSpread({}, mapFields(['form.storeType', 'form.storeDetail', 'form.fullName', 'form.firstName', 'form.lastName'])),\n  mounted: function mounted() {\n    var _this = this;\n\n    fetch('https://randomuser.me/api/?results=50&nat=au&exc=login').then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      _this.users = res.results.map(function (u) {\n        return \"\".concat(u.name.first, \" \").concat(u.name.last);\n      });\n    }).catch(function () {});\n  },\n  methods: {\n    next: function next() {\n      if (this.validateForm()) {\n        this.$router.push('/form2');\n      }\n    },\n    onFullNameSelected: function onFullNameSelected(name) {\n      this.fullName = name;\n\n      var _name$split = name.split(' ', 2);\n\n      var _name$split2 = _slicedToArray(_name$split, 2);\n\n      this.firstName = _name$split2[0];\n      this.lastName = _name$split2[1];\n    },\n    // Validate form and return true if everything is ok\n    validateForm: function validateForm() {\n      this.errors = [];\n\n      if (!this.storeType) {\n        this.errors['storeType'] = 'Store type is required';\n      }\n\n      if (this.storeType === 'Metro' && this.storeDetail.trim() === '') {\n        this.errors['storeDetail'] = 'Store details are required for Metro type';\n      }\n\n      if (!this.fullName) {\n        this.errors['fullName'] = 'Full name is required';\n      }\n\n      if (!this.firstName) {\n        this.errors['firstName'] = 'First name is required';\n      }\n\n      if (!this.lastName) {\n        this.errors['lastName'] = 'Last name is required';\n      }\n\n      return Object.keys(this.errors).length === 0;\n    }\n  }\n};",{"version":3,"sources":["Form.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA,OAAA,YAAA,MAAA,gBAAA;AACA,SAAA,SAAA,QAAA,iBAAA;AACA,eAAA;AACA,cAAA;AACA;AADA,GADA;AAIA,MAJA,kBAIA;AACA,WAAA;AACA,kBAAA,CACA,MADA,EAEA,OAFA,EAGA,QAHA,EAIA,QAJA,CADA;AAOA,aAAA,EAPA;AAQA,cAAA,EARA,CAQA;;AARA,KAAA;AAUA,GAfA;AAgBA,8BACA,UAAA,CACA,gBADA,EAEA,kBAFA,EAGA,eAHA,EAIA,gBAJA,EAKA,eALA,CAAA,CADA,CAhBA;AAyBA,SAzBA,qBAyBA;AAAA;;AACA,UAAA,wDAAA,EACA,IADA,CACA;AAAA,aAAA,IAAA,IAAA,EAAA;AAAA,KADA,EAEA,IAFA,CAEA,eAAA;AACA,YAAA,KAAA,GAAA,IAAA,OAAA,CAAA,GAAA,CAAA;AAAA,yBAAA,EAAA,IAAA,CAAA,KAAA,cAAA,EAAA,IAAA,CAAA,IAAA;AAAA,OAAA,CAAA;AACA,KAJA,EAKA,KALA,CAKA,YAAA,CAAA,CALA;AAMA,GAhCA;AAiCA,WAAA;AACA,QADA,kBACA;AACA,UAAA,KAAA,YAAA,EAAA,EAAA;AACA,aAAA,OAAA,CAAA,IAAA,CAAA,QAAA;AACA;AACA,KALA;AAMA,sBANA,8BAMA,IANA,EAMA;AACA,WAAA,QAAA,GAAA,IAAA;;AADA,wBAEA,KAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAFA;;AAAA;;AAEA,WAAA,SAFA;AAEA,WAAA,QAFA;AAGA,KATA;AAUA;AACA,gBAXA,0BAWA;AACA,WAAA,MAAA,GAAA,EAAA;;AACA,UAAA,CAAA,KAAA,SAAA,EAAA;AACA,aAAA,MAAA,CAAA,WAAA,IAAA,wBAAA;AACA;;AACA,UAAA,KAAA,SAAA,KAAA,OAAA,IAAA,KAAA,WAAA,CAAA,IAAA,OAAA,EAAA,EAAA;AACA,aAAA,MAAA,CAAA,aAAA,IAAA,2CAAA;AACA;;AACA,UAAA,CAAA,KAAA,QAAA,EAAA;AACA,aAAA,MAAA,CAAA,UAAA,IAAA,uBAAA;AACA;;AACA,UAAA,CAAA,KAAA,SAAA,EAAA;AACA,aAAA,MAAA,CAAA,WAAA,IAAA,wBAAA;AACA;;AACA,UAAA,CAAA,KAAA,QAAA,EAAA;AACA,aAAA,MAAA,CAAA,UAAA,IAAA,uBAAA;AACA;;AACA,aAAA,OAAA,IAAA,CAAA,KAAA,MAAA,EAAA,MAAA,KAAA,CAAA;AACA;AA7BA;AAjCA,CAAA","sourcesContent":["<template>\n  <div class=\"ui centered card\">\n    <h1 class=\"ui header\">Page 1</h1>\n\n    <div class=\"content\">\n      <div class=\"ui form\">\n        <!-- Store info -->\n        <fieldset class=\"ui segment fields\">\n          <div class=\"field\">\n            <label>Store Type</label>\n            <select v-model=\"storeType\">\n              <option\n                v-for=\"(option, index) in storeTypes\"\n                :key=\"index\"\n                :value=\"option\"\n              >\n                {{ option }}\n              </option>\n            </select>\n            <div class=\"ui pointing red basic label\" v-show=\"errors['storeType']\">\n              {{ errors['storeType'] }}\n            </div>\n          </div>\n\n          <div class=\"field\" v-show=\"storeType === 'Metro'\">\n            <label>Store Detail</label>\n            <input type=\"text\" v-model=\"storeDetail\">\n            <div class=\"ui pointing red basic label\" v-show=\"errors['storeDetail']\">\n              {{ errors['storeDetail'] }}\n            </div>\n          </div>\n        </fieldset>\n\n        <!-- User info -->\n        <fieldset class=\"ui segment fields\">\n          <div class=\"field\">\n            <label>Name lookup</label>\n            <autocomplete\n              :items=\"users\"\n              @change=\"onFullNameSelected\"\n            ></autocomplete>\n            <div class=\"ui pointing red basic label\" v-show=\"errors['fullName']\">\n              {{ errors['fullName'] }}\n            </div>\n          </div>\n\n          <div class=\"field\">\n            <label>First Name</label>\n            <input type=\"text\" v-model=\"firstName\">\n            <div class=\"ui pointing red basic label\" v-show=\"errors['firstName']\">\n              {{ errors['firstName'] }}\n            </div>\n          </div>\n\n          <div class=\"field\">\n            <label>Last Name</label>\n            <input type=\"text\" v-model=\"lastName\">\n            <div class=\"ui pointing red basic label\" v-show=\"errors['lastName']\">\n              {{ errors['lastName'] }}\n            </div>\n          </div>\n        </fieldset>\n\n        <div class=\"ui buttons\">\n          <button class=\"ui disabled button\" disabled>\n            Back\n          </button>\n          <button class=\"ui primary button\" @click=\"next()\">\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Autocomplete from './Autocomplete';\nimport { mapFields } from 'vuex-map-fields';\nexport default {\n  components: {\n    Autocomplete,\n  },\n  data() {\n    return {\n      storeTypes: [\n        'Mall',\n        'Metro',\n        'Arcade',\n        'Centre',\n      ],\n      users: [],\n      errors: {},       // for form validation\n    };\n  },\n  computed: {\n    ...mapFields([\n      'form.storeType',\n      'form.storeDetail',\n      'form.fullName',\n      'form.firstName',\n      'form.lastName',\n    ]),\n  },\n  mounted() {\n    fetch('https://randomuser.me/api/?results=50&nat=au&exc=login')\n      .then(res => res.json())\n      .then(res => {\n        this.users = res.results.map(u => `${u.name.first} ${u.name.last}`);\n      })\n      .catch(() => {});\n  },\n  methods: {\n    next() {\n      if (this.validateForm()) {\n        this.$router.push('/form2');\n      }\n    },\n    onFullNameSelected(name) {\n      this.fullName = name;\n      [this.firstName, this.lastName] = name.split(' ', 2);\n    },\n    // Validate form and return true if everything is ok\n    validateForm() {\n      this.errors = [];\n      if (!this.storeType) {\n        this.errors['storeType'] = 'Store type is required';\n      }\n      if (this.storeType === 'Metro' && this.storeDetail.trim() === '') {\n        this.errors['storeDetail'] = 'Store details are required for Metro type';\n      }\n      if (!this.fullName) {\n        this.errors['fullName'] = 'Full name is required';\n      }\n      if (!this.firstName) {\n        this.errors['firstName'] = 'First name is required';\n      }\n      if (!this.lastName) {\n        this.errors['lastName'] = 'Last name is required';\n      }\n      return Object.keys(this.errors).length === 0;\n    },\n  },\n}\n</script>"],"sourceRoot":"src/views"}]}